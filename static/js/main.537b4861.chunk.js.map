{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.module.css","components/Section/Section.module.css","components/Notification/Notification.module.css","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Notification/Notification.js","reportWebVitals.js","App.js","AppHook2.js","index.js"],"names":["module","exports","Statistics","console","log","this","props","good","neutral","bad","totalFeedback","positiveFeedbackPercentage","className","s","list","item","Component","FeedbackOptions","options","onLeaveFeedback","container","map","option","onClick","type","button","Section","title","children","Notification","message","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AppHook2","useState","setGood","setNeutral","setBad","feedbackBtn","Object","keys","value","prevState","Math","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oKACAA,EAAOC,QAAU,CAAC,OAAS,gCAAgC,UAAY,qC,mCCAvED,EAAOC,QAAU,CAAC,MAAQ,yB,gBCA1BD,EAAOC,QAAU,CAAC,MAAQ,8B,0KCwBpBC,E,4JAEJ,WACEC,QAAQC,IAAK,4JACd,MAA0EC,KAAKC,MAAvEC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAAKC,EAA5B,EAA4BA,cAAeC,EAA3C,EAA2CA,2BAC1C,OACI,mCACE,qBAAIC,UAAWC,IAAEC,KAAjB,UACE,qBAAIF,UAAWC,IAAEE,KAAjB,mBAA8BR,KAC9B,qBAAIK,UAAWC,IAAEE,KAAjB,sBAAiCP,KACjC,qBAAII,UAAWC,IAAEE,KAAjB,kBAA6BN,KAC7B,qBAAIG,UAAWC,IAAEE,KAAjB,oBAAgCL,KAChC,qBAAIE,UAAWC,IAAEE,KAAjB,iCAA4CJ,EAA5C,iB,GAZaK,aA2BVd,I,iBC3BAe,MAtBf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAClC,OACE,qBAAKP,UAAWC,IAAEO,UAAlB,SACGF,EAAQG,KAAI,SAACC,GAAD,OACX,wBAEEC,QAAS,kBAAIJ,EAAgBG,IAC7BE,KAAK,SACLZ,UAAWC,IAAEY,OAJf,SAMGH,GALIA,S,iBCSAI,MAbd,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACzB,OACE,oCACE,oBAAIhB,UAAWC,IAAEc,MAAjB,SAAyBA,IACxBC,M,iBCOQC,MAZd,YAAoC,IAAZC,EAAW,EAAXA,QACvB,OACE,8BACE,mBAAGlB,UAAWC,IAAEc,MAAhB,SAAwBG,OCMfC,GCLGf,YDPM,SAAAgB,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,OEEC,SAAUQ,IACrB,MAAwBC,mBAAS,GAAjC,mBAAOlC,EAAP,KAAamC,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOjC,EAAP,KAAgBmC,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOhC,EAAP,KAAYmC,EAAZ,KAEMC,EAAc,CAAEtC,OAAMC,UAASC,OAkDjCC,EAAgB,WAEhB,OADAP,QAAQC,IAAK,0HACNG,EAAOC,EAAUC,GAU5B,OACI,sBAAKG,UAAU,eAAf,UAEE,cAAC,EAAD,CAASe,MAAO,wBAAhB,SAEE,cAAC,EAAD,CACKT,QAAS4B,OAAOC,KAAKF,GACrB1B,gBA5CG,SAAC6B,GAIjB,OAFA7C,QAAQC,IAAK,sHAEL4C,GAEJ,IAAK,OACLN,GAAS,SAACO,GAAD,OAAeA,EAAY,KACpC,MAEA,IAAK,UACDN,GAAY,SAACM,GAAD,OAAeA,EAAY,KAC3C,MAEA,IAAK,MACDL,GAAQ,SAACK,GAAD,OAAeA,EAAY,KACvC,MAEA,QACI,aA6BKvC,IAAkB,EACnB,cAAC,EAAD,CAASiB,MAAM,aAAf,SACF,cAAC,EAAD,CACApB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,cAAeA,IACbC,4BAvBZR,QAAQC,IAAK,qIACN8C,KAAKC,MAAa,IAAP5C,EAAaG,UAyBrB,cAAC,EAAD,CAAcoB,QAAQ,yBCvFpCsB,IAASC,OACP,cAAC,IAAMC,WAAP,UAEE,cAACd,EAAD,MAEFe,SAASC,eAAe,SAM1BzB,M","file":"static/js/main.537b4861.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__2MBxu\",\"container\":\"FeedbackOptions_container__AMp5p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Section_title__1mqLN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Notification_title__1cwkC\"};","import React, {Component} from 'react';\r\nimport s from './Statistics.module.css'\r\nimport PropTypes from 'prop-types';\r\n\r\n// Это вариант компонента-функции\r\n// function Statistics({ good, neutral, bad, totalFeedback, positiveFeedbackPercentage }) {\r\n\r\n//     // console.log('Statistics /  totalFeedback : ', totalFeedback);\r\n//     // console.log('Statistics /  positiveFeedbackPercentage : ', positiveFeedbackPercentage);\r\n    \r\n//     return (\r\n//         <>\r\n//           <ul className={s.list}>\r\n//             <li className={s.item}>Good: {good}</li>\r\n//             <li className={s.item}>Neutral: {neutral}</li>\r\n//             <li className={s.item}>Bad: {bad}</li>\r\n//             <li className={s.item}>Total: { totalFeedback}</li>\r\n//             <li className={s.item}>Positive feedbacks: {positiveFeedbackPercentage} %</li>\r\n//           </ul>\r\n//       </>\r\n//     )\r\n// };\r\n\r\n\r\n// Это вариант компонента-класса\r\nclass Statistics extends Component {\r\n\r\n  render() {\r\n    console.log (\"Сработал react компонент-класс Statistics \")\r\n   const { good, neutral, bad, totalFeedback, positiveFeedbackPercentage } = this.props\r\n    return (\r\n        <>\r\n          <ul className={s.list}>\r\n            <li className={s.item}>Good: {good}</li>\r\n            <li className={s.item}>Neutral: {neutral}</li>\r\n            <li className={s.item}>Bad: {bad}</li>\r\n            <li className={s.item}>Total: { totalFeedback}</li>\r\n            <li className={s.item}>Positive feedbacks: {positiveFeedbackPercentage} %</li>\r\n          </ul>\r\n      </>\r\n    ) \r\n  }\r\n\r\n }\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number,\r\n};\r\n\r\nexport default Statistics;","import PropTypes from 'prop-types';\r\nimport s from './FeedbackOptions.module.css';\r\n\r\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\r\n  return (\r\n    <div className={s.container}>\r\n      {options.map((option) => (\r\n        <button\r\n          key={option}\r\n          onClick={()=>onLeaveFeedback(option)}\r\n          type=\"button\"\r\n          className={s.button}\r\n        >\r\n          {option}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import PropTypes from 'prop-types';\r\n\r\nimport s from './Section.module.css';\r\n\r\n function Section({ title, children }) {\r\n  return (\r\n    <section>\r\n      <h2 className={s.title}>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Section\r\n    ;","import PropTypes from 'prop-types';\r\nimport s from './Notification.module.css';\r\n\r\n function Notification({ message }) {\r\n  return (\r\n    <div>\r\n      <p className={s.title}>{message}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import './App.css';\r\nimport React, { Component } from 'react';\r\nimport Statistics from './components/Statistics'\r\nimport FeedbackOptions from './components/FeedbackOptions'\r\nimport Section from './components/Section'\r\nimport Notification from './components/Notification'\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0\r\n}\r\n\r\n\r\n// Общий обработчик для нескольких разных кнопок (функция использовалась до выноса кнопок в отдельный компонент)\r\n  onLeaveFeedback = (e) => {\r\n    const { name } = e.currentTarget;\r\n    this.setState(prevState => ({\r\n      [name]: prevState[name] + 1,\r\n    }));\r\n  };\r\n  \r\n    increment = (value) => () => {\r\n    this.setState((prevState) => ({\r\n      [value]: prevState[value] + 1,\r\n    }));\r\n  };\r\n\r\n  // Подсчитываем общую сумму\r\n  totalFeedback = () => {\r\n    console.log('Подсчитываем общую сумму...')\r\n    const { good, neutral, bad } = this.state;\r\n    return (good + neutral + bad);\r\n  };\r\n\r\n\r\n// Высчитываем пропрорцию (процент) позитивных откликов\r\n  positiveFeedbackPercentage = () => {\r\n    return Math.round(this.state.good * 100 / this.totalFeedback());\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n\r\n    console.log (\" goit-react-hw-04-hooks-feedback\")\r\n\r\n    const { good, neutral, bad } = this.state;\r\n    const { onLeaveFeedback, totalFeedback, positiveFeedbackPercentage } = this;\r\n    \r\n    const options = Object.keys(this.state); //Назначаем каждой кнопке уникальный идентификатор (индекс массива)\r\n    // заносим свойства объекта this.state  в отдельный массив опций через функцию Object.keys(this.state)\r\n       \r\n    // console.log('options = Object.keys(this.state)', options)\r\n    \r\n    return (\r\n      <div className=\"containerApp\">\r\n       \r\n        <Section title={'Please leave feedback'}>\r\n          <FeedbackOptions options={options} onLeaveFeedback={this.increment} />\r\n        </Section>\r\n                  \r\n          {/* <FeedbackOptions options={options} onLeaveFeedback={this.onLeaveFeedback} /> */}\r\n        {/* <div>\r\n            <button type=\"button\" name=\"good\" onClick={this.onLeaveFeedback}> Good </button>\r\n            <button type=\"button\"  name=\"neutral\" onClick={this.onLeaveFeedback}> Neutral </button>\r\n            <button type=\"button\"  name=\"bad\" onClick={this.onLeaveFeedback}> Bad </button>\r\n          </div> */}\r\n\r\n        {/* Вынесли кнопки с типом отзыва в отдельный компонент. Идентификация кнопок теперь не по имени, а по индексув массиве\r\n        В связи с этим использкем не функцию this.onLeaveFeedback c name, a  функцию this.increment  c value */}\r\n          \r\n\r\n          {totalFeedback() > 0 ? (\r\n          <Section title=\"Statistics\">\r\n            <Statistics\r\n            good={good}\r\n            neutral={neutral}\r\n            bad={bad}\r\n            totalFeedback={totalFeedback()}\r\n              positiveFeedbackPercentage={positiveFeedbackPercentage()} />\r\n             </Section>\r\n             ) : (\r\n            <Notification message=\"No feedback given\" />\r\n              )}\r\n         \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","import './App.css';\r\nimport React, { Component } from 'react';\r\nimport { useState } from 'react';\r\nimport Statistics from './components/Statistics'\r\nimport FeedbackOptions from './components/FeedbackOptions'\r\nimport Section from './components/Section'\r\nimport Notification from './components/Notification'\r\n\r\n\r\nexport default function  AppHook2 () {\r\n    const [good, setGood] = useState(0);\r\n    const [neutral, setNeutral] = useState(0);\r\n    const [bad, setBad] = useState(0);\r\n\r\n    const feedbackBtn = { good, neutral, bad };\r\n\r\n// // Общий обработчик для нескольких разных кнопок (функция использовалась до выноса кнопок в отдельный компонент)\r\n// const onLeaveFeedback = (e) => {\r\n//     const { name } = e.currentTarget;\r\n\r\n//     switch (name) {\r\n\r\n//         case \"good\" :\r\n//         setGood ((prevState) => prevState + 1);\r\n//         break;\r\n\r\n//         case \"neutral\" :\r\n//             setNeutral ((prevState) => prevState + 1);\r\n//         break;\r\n\r\n//         case \"bad\" :\r\n//             setBad ((prevState) => prevState + 1);\r\n//         break;\r\n\r\n//         default:\r\n//             return;\r\n//     }   \r\n//   };\r\n\r\n  const increment = (value) => {\r\n\r\n    console.log ('Сработала функция increment  .... ');\r\n\r\n    switch (value) {\r\n\r\n        case \"good\" :\r\n        setGood ((prevState) => prevState + 1);\r\n        break;\r\n\r\n        case \"neutral\" :\r\n            setNeutral ((prevState) => prevState + 1);\r\n        break;\r\n\r\n        case \"bad\" :\r\n            setBad ((prevState) => prevState + 1);\r\n        break;\r\n\r\n        default:\r\n            return;\r\n    }   \r\n  };\r\n\r\n\r\n\r\n  const totalFeedback = () => {\r\n        console.log ('Сработала функция totalFeedback = ....');\r\n        return good + neutral + bad;\r\n  }\r\n\r\n// Высчитываем пропрорцию (процент) позитивных откликов\r\nconst positiveFeedbackPercentage = () => {\r\n    console.log ('Сработала функция positiveFeedbackPercentage ....');\r\n    return Math.round(good * 100 / totalFeedback());\r\n  }\r\n\r\n\r\n    return (\r\n        <div className=\"containerApp\">\r\n         \r\n          <Section title={'Please leave feedback'}>\r\n            \r\n            <FeedbackOptions\r\n                 options={Object.keys(feedbackBtn)}\r\n                 onLeaveFeedback={increment} />\r\n\r\n            </Section> \r\n                  \r\n                {totalFeedback() > 0 ? (\r\n                <Section title=\"Statistics\">\r\n              <Statistics\r\n              good={good}\r\n              neutral={neutral}\r\n              bad={bad}\r\n              totalFeedback={totalFeedback()}\r\n                positiveFeedbackPercentage={positiveFeedbackPercentage()} />\r\n               </Section>\r\n               ) : (\r\n              <Notification message=\"No feedback given\" />\r\n                )}\r\n           \r\n        </div>\r\n      )\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport AppHook2 from './AppHook2';\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    {/* <App /> */}\r\n    <AppHook2 />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}